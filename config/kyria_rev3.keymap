/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    combos {
        compatible = "zmk,combos";

        window {
            bindings = <&kp LGUI>;
            key-positions = <24>;
            layers = <0 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E   &kp R   &kp T                                                         &kp Y      &kp U   &kp I      &kp O       &kp P      &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &kp A  &kp S  &kp D   &kp F   &kp G                                                         &kp H      &kp J   &kp K      &kp L       &kp SEMI   &kp LCTRL
&mo 2           &kp Z  &kp X  &kp C   &kp V   &kp B         &trans     &kp TAB  &kp LS(TAB)  &trans         &kp N      &kp M   &kp COMMA  &kp PERIOD  &kp SLASH  &kp GRAVE
                              &trans  &trans  &kp LEFT_ALT  &kp SPACE  &mo 1    &kp ENTER    &kp BACKSPACE  &kp MINUS  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        function {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&kp PRINTSCREEN  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0        &kp EQUAL                                             &kp LEFT_PARENTHESIS   &kp LEFT_BRACKET   &kp LEFT_BRACE   &trans     &trans  &trans
&trans           &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans        &kp PLUS                                              &kp LEFT_ARROW         &kp DOWN           &kp UP_ARROW     &kp RIGHT  &trans  &trans
&trans           &kp N7        &kp N8        &kp N9        &trans        &kp ASTERISK  &trans  &trans  &kp HASH  &kp DOLLAR    &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp BSLH   &trans  &tog 3
                                             &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans  &kp EXCL  &kp QUESTION  &kp K_PREV             &kp K_PLAY_PAUSE   &kp K_NEXT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        window_management {
            bindings = <
&trans  &kp LG(Q)  &kp LG(W)  &kp LG(E)  &kp LG(R)  &kp LG(T)                                                                 &kp LG(Y)  &kp LG(U)  &kp LG(I)  &kp LG(O)  &kp LG(P)  &trans
&trans  &kp LG(A)  &kp LG(S)  &kp LG(D)  &kp LG(F)  &kp LG(G)                                                                 &kp LG(H)  &kp LG(J)  &kp LG(K)  &kp LG(L)  &trans     &trans
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(B)  &kp LGUI       &kp LG(NUMBER_2)  &kp LG(N4)  &kp LG(NUMBER_6)  &kp LG(N)  &kp LG(M)  &trans     &trans     &trans     &trans
                              &trans     &trans     &kp LALT   &kp LG(SPACE)  &kp LG(N1)        &kp LG(N3)  &kp LG(N5)        &trans     &trans     &trans
            >;
        };

        gaming {
            bindings = <
&kp ESCAPE  &kp NUMBER_1  &kp Q  &kp W  &kp E  &kp R                                                  &none           &none             &none       &none  &none  &none
&kp SPACE   &kp NUMBER_2  &kp A  &kp S  &kp D  &kp F                                                  &none           &none             &none       &none  &none  &none
&mo 2       &kp NUMBER_3  &kp Z  &kp X  &kp C  &kp V  &kp G           &kp TAB    &none         &none  &none           &none             &none       &none  &none  &tog 3
                                 &kp T  &kp H  &kp M  &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &none  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT
            >;
        };
    };
};
